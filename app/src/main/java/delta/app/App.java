/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package delta.app;

import io.javalin.Javalin;
import io.javalin.http.sse.SseClient;
import io.javalin.json.JavalinJackson;
import io.javalin.plugin.bundled.CorsPluginConfig;
import io.javalin.websocket.WsContext;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Instant;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import static com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
import static java.nio.charset.StandardCharsets.UTF_8;
import static java.nio.file.StandardOpenOption.APPEND;
import static java.nio.file.StandardOpenOption.CREATE;
import static java.util.concurrent.TimeUnit.SECONDS;
import static org.eclipse.jetty.http.HttpHeader.CACHE_CONTROL;
import static org.eclipse.jetty.http.HttpHeaderValue.NO_CACHE;

public class App {

    public static void main(String[] args) {
        int payloadLength = (args.length > 0) ? Integer.parseInt(args[0]) : 0;
        new App(payloadLength).start();
    }

    private final Javalin app;
    private final ExecutorService executor = Executors.newWorkStealingPool();

    private final Queue<CompletableFuture<Message>> lpClients = new ConcurrentLinkedQueue<>();
    private final Queue<SseClient> sseClients = new ConcurrentLinkedQueue<>();
    private final Queue<WsContext> wsClients = new ConcurrentLinkedQueue<>();

    private final Queue<ReturnRecord> logReplies = new ConcurrentLinkedQueue<>();

    private final Path csvFile;
    private final String payload;


    public App(int payloadLength) {
        csvFile = Path.of("LogReply-" + Instant.now() + "-" + payloadLength + ".csv");
        payload = randomPayload(payloadLength);

        app = Javalin.create(config -> {
            config.plugins.enableCors(cors -> cors.add(CorsPluginConfig::anyHost));
            config.staticFiles.add("/clients");
            config.jsonMapper(new JavalinJackson().updateMapper(
                    mapper -> mapper.configure(WRITE_DATES_AS_TIMESTAMPS, false)));
        });

        configureReturn();

        configureLongPolling();
        configureServerSentEvents();
        configureWebsocket();
    }

    private static String randomPayload(int payloadLength) {
        var bytes = new byte[payloadLength];
        new Random().nextBytes(bytes);
        return new String(bytes, UTF_8);
    }

    public void start() {
        app.start(7070);

        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(this::sendMessage, 0L, 1L, SECONDS);
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(this::writeLogReplyToCSV, 10L, 30L, SECONDS);
    }

    private void configureReturn() {
        app.post("/return", ctx -> {
            var currentTime = System.nanoTime();
            var record = ctx.bodyAsClass(ReturnRecord.class);

            logReplies.add(new ReturnRecord(
                    record.timestamp(),
                    record.protocol(),
                    currentTime - record.nanoTime()));
        });
    }

    private void configureLongPolling() {
        app.post("/lp", ctx -> {
            ctx.header(CACHE_CONTROL.toString(), NO_CACHE.toString());
            CompletableFuture<Message> lpFuture = new CompletableFuture<>();
            lpClients.add(lpFuture);
            ctx.future(() -> lpFuture.thenAccept(ctx::json));
        });
    }

    private void configureServerSentEvents() {
        app.sse("/sse", sseClient -> {
            sseClient.keepAlive();
            sseClient.onClose(() -> sseClients.remove(sseClient));
            sseClients.add(sseClient);
        });
    }

    private void configureWebsocket() {
        app.ws("/ws", ws -> {
            ws.onConnect(wsClients::add);
            ws.onClose(wsClients::remove);
        });
    }

    private void sendMessage() {
        CompletableFuture<Message> lpFuture;
        while ((lpFuture = lpClients.poll()) != null) {
            lpFuture.complete(createMessage());
        }

        sseClients.forEach(sseClient -> executor.execute(() -> sseClient.sendEvent(createMessage())));

        wsClients.forEach(wsClient -> executor.execute(() -> wsClient.send(createMessage())));
    }

    private Message createMessage() {
        return new Message(
                Instant.now(),
                System.nanoTime(),
                payload);
    }


    private void writeLogReplyToCSV() {
        try (var writer = Files.newBufferedWriter(csvFile, UTF_8, CREATE, APPEND)) {
            ReturnRecord logReply;
            while ((logReply = logReplies.poll()) != null) {
                writer.write(convertRecToLine(logReply));
            }
        } catch (IOException e) {
            throw new RuntimeException("Error writing latency to CSV file " + csvFile, e);
        }
    }

    private String convertRecToLine(ReturnRecord logReply) {
        return String.join(";",
                logReply.timestamp().toString(),
                logReply.protocol(),
                logReply.nanoTime().toString()
        ) + System.lineSeparator();
    }

}
