/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package delta.app;

import io.javalin.Javalin;
import io.javalin.http.sse.SseClient;
import io.javalin.plugin.bundled.CorsPluginConfig;
import io.javalin.websocket.WsContext;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {

    public static void main(String[] args) {
        new App().start();
    }

    private final Javalin app;

    private final Queue<SseClient> sseClients = new ConcurrentLinkedQueue<>();
    private final Queue<WsContext> wsClients = new ConcurrentLinkedQueue<>();

    public App() {
        app = Javalin.create(config -> config.plugins.enableCors(cors -> cors.add(CorsPluginConfig::anyHost)));

        configureReturn();
        configureServerSentEvents();
        configureWebsocket();
    }

    public void start() {
        app.start(7070);

        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(this::sendMessage, 0L, 1L, TimeUnit.SECONDS);
    }

    private void configureReturn() {
        app.post("/return", ctx -> {
            var currentTime = System.nanoTime();
            var record = ctx.bodyAsClass(ReturnRecord.class);
            System.out.println(record.protocol() + ";" + (currentTime - record.nanoTime()));
        });
    }

    private void configureServerSentEvents() {
        app.sse("/sse", sseClient -> {
            sseClient.keepAlive();
            sseClient.onClose(() -> sseClients.remove(sseClient));
            sseClients.add(sseClient);
        });
    }

    private void configureWebsocket() {
        app.ws("/ws", ws -> {
            ws.onConnect(wsClients::add);
            ws.onClose(wsClients::remove);
        });
    }

    private void sendMessage() {
        sseClients.forEach(sseClient -> sseClient.sendEvent(System.nanoTime()));
        wsClients.forEach(wsClient -> wsClient.send(System.nanoTime()));
    }
}
